CREATE OR REPLACE DATABASE SPOTIFY_DWH;

CREATE OR REPLACE DATABASE MANAGE_DB;

CREATE OR REPLACE SCHEMA MANAGE_DB.FILE_FORMATS;

CREATE OR REPLACE FILE FORMAT MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT
    TYPE = CSV,
    FIELD_DELIMITER = ';',
    SKIP_HEADER = 1,
    ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE;

CREATE OR REPLACE STORAGE INTEGRATION s3_spotify_transformed_data
    TYPE = EXTERNAL_STAGE
    STORAGE_PROVIDER = S3
    ENABLED = TRUE
    STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::381491959115:role/snowflake-s3-storage-integration'
    STORAGE_ALLOWED_LOCATIONS = ('s3://spotify-etl-project-jv/transformed_data/')
        COMMENT = 'Creating connection to S3 bucket with the Spotify data cleansed';

DESC INTEGRATION s3_spotify_transformed_data;

CREATE OR REPLACE SCHEMA MANAGE_DB.EXTERNAL_STAGES;

CREATE OR REPLACE STAGE MANAGE_DB.EXTERNAL_STAGES.ALBUM_DATA
    URL = 's3://spotify-etl-project-jv/transformed_data/album_data/'
    STORAGE_INTEGRATION = s3_spotify_transformed_data
    FILE_FORMAT = MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT
    DIRECTORY = (ENABLE = TRUE AUTO_REFRESH = TRUE);

CREATE OR REPLACE STAGE MANAGE_DB.EXTERNAL_STAGES.SONG_DATA
    URL = 's3://spotify-etl-project-jv/transformed_data/song_data/'
    STORAGE_INTEGRATION = s3_spotify_transformed_data
    FILE_FORMAT = MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT
    DIRECTORY = (ENABLE = TRUE AUTO_REFRESH = TRUE);

CREATE OR REPLACE STAGE MANAGE_DB.EXTERNAL_STAGES.ARTIST_DATA
    URL = 's3://spotify-etl-project-jv/transformed_data/artist_data/'
    STORAGE_INTEGRATION = s3_spotify_transformed_data
    FILE_FORMAT = MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT
    DIRECTORY = (ENABLE = TRUE AUTO_REFRESH = TRUE);
    
CREATE OR REPLACE STAGE MANAGE_DB.EXTERNAL_STAGES.TOP_TRACKS_ARTIST_DATA
    URL = 's3://spotify-etl-project-jv/transformed_data/top_tracks_artist_data/'
    STORAGE_INTEGRATION = s3_spotify_transformed_data
    FILE_FORMAT = MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT
    DIRECTORY = (ENABLE = TRUE AUTO_REFRESH = TRUE);

CREATE OR REPLACE SCHEMA SPOTIFY_DWH.FACT;
CREATE OR REPLACE SCHEMA SPOTIFY_DWH.DIMENSION;

CREATE OR REPLACE TABLE SPOTIFY_DWH.DIMENSION.ALBUM (
    album_id STRING NOT NULL,
    album_name STRING,
    album_release_date DATE,
    album_total_tracks INTEGER,
    album_external_urls STRING
);

CREATE OR REPLACE TABLE SPOTIFY_DWH.DIMENSION.SONG (
    song_id STRING NOT NULL,
    song_name STRING,
    song_duration_ms INTEGER,
    song_url STRING,
    song_popularity INTEGER,
    song_added TIMESTAMP_NTZ,
    album_id STRING,
    artist_id STRING
);


CREATE OR REPLACE TABLE SPOTIFY_DWH.DIMENSION.ARTISTS (
    artist_id STRING NOT NULL,
    artist_name STRING,
    external_urls STRING
);

CREATE OR REPLACE TABLE SPOTIFY_DWH.FACT.TOP_TRACKS_ARTIST (
    artist_id STRING,
    artist_name STRING,
    track_name STRING,
    popularity INTEGER,
    duration_ms INTEGER,
    song_id STRING,
    album_name STRING,
    total_tracks INTEGER,
    album_id STRING,
    release_date DATE,
    image_album STRING,
    external_url STRING
    );

CREATE OR REPLACE SCHEMA MANAGE_DB.PIPES;

DESC PIPE TOP_TRACKS_ARTIST_PIPE

CREATE OR REPLACE PIPE MANAGE_DB.PIPES.ALBUM_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO SPOTIFY_DWH.DIMENSION.ALBUM
FROM @MANAGE_DB.EXTERNAL_STAGES.ALBUM_DATA
FILE_FORMAT = MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT;

CREATE OR REPLACE PIPE MANAGE_DB.PIPES.ARTIST_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO SPOTIFY_DWH.DIMENSION.ARTISTS
FROM @MANAGE_DB.EXTERNAL_STAGES.ARTIST_DATA
FILE_FORMAT = MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT;

CREATE OR REPLACE PIPE MANAGE_DB.PIPES.SONG_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO SPOTIFY_DWH.DIMENSION.SONG
FROM @MANAGE_DB.EXTERNAL_STAGES.SONG_DATA
FILE_FORMAT = MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT;

CREATE OR REPLACE PIPE MANAGE_DB.PIPES.TOP_TRACKS_ARTIST_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO SPOTIFY_DWH.FACT.TOP_TRACKS_ARTIST
FROM @MANAGE_DB.EXTERNAL_STAGES.TOP_TRACKS_ARTIST_DATA
FILE_FORMAT = MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT;

SELECT * FROM SPOTIFY_DWH.FACT.TOP_TRACKS_ARTIST;

TRUNCATE TABLE SPOTIFY_DWH.DIMENSION.SONG;
TRUNCATE TABLE SPOTIFY_DWH.FACT.TOP_TRACKS_ARTIST;
TRUNCATE TABLE SPOTIFY_DWH.DIMENSION.ALBUM;
TRUNCATE TABLE SPOTIFY_DWH.DIMENSION.ARTISTS;


COPY INTO SPOTIFY_DWH.FACT.TOP_TRACKS_ARTIST
FROM @MANAGE_DB.EXTERNAL_STAGES.TOP_TRACKS_ARTIST_DATA
FILE_FORMAT = MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT;

ALTER FILE FORMAT MANAGE_DB.FILE_FORMATS.CSV_FILE_FORMAT
SET error_on_column_count_mismatch = FALSE;
